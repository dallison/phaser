syntax = "proto3";

// There are tests in message_test.cc that use both the messages hand-coded in there
// and InnnerMessage and TestMessage defined here.  The messages defined here should
// be serialization-compatible with the hand-coded messages in message_test.cc.
// So this means that the field numbers and types should match up.  Also, don't
// delete fields from these messages, as the tests in message_test.cc rely on them.
// You can add fields to these messages without also adding them to the hand-coded
// messages because this is compatible for serialization.
package foo.bar;
import "google/protobuf/any.proto";

enum EnumTest {
  UNSET = 0; 
  FOO = 0xda; 
  BAR = 0xad;
}

message InnerMessage {
  string str = 10;
  sfixed64 f = 20;
  EnumTest e = 30;
  repeated EnumTest ev = 40;
  oneof uv {
    uint32 uva = 50;
    EnumTest uvb = 60;
  }
}

message TestMessage {
  int32 x = 100;
  int64 y = 101;
  string s = 102;
  InnerMessage m = 103;
  google.protobuf.Any any = 200;

  // Repeated fields.
  repeated int32 vi32 = 104;
  repeated string vstr = 105;
  repeated InnerMessage vm = 106;

  // Oneof fields.
  oneof u1 {
    uint32 u1a = 107;
    fixed64 u1b = 108;
  }

  oneof u2 {
    int64 u2a = 109;
    string u2b = 110;
  }

  oneof u3 {
    int64 u3a = 111;
    InnerMessage u3b = 112;
  }
  bytes buffer = 113;
  EnumTest e = 114;
  float fl = 115;
  double db = 116;

  map<string, int32> values = 117;
}

message TestMessageNewFields {
  int32 new1 = 2;
  int32 x = 100;
  int64 y = 101;
  string s = 102;
  string new2 = 3;
  InnerMessage m = 103;

  // Repeated fields.
  repeated int32 vi32 = 104;
  repeated string vstr = 105;
  repeated int32 new3 = 4;
  repeated InnerMessage vm = 106;

  // Oneof fields.
  oneof u1 {
    uint32 u1a = 107;
    fixed64 u1b = 108;
  }

  oneof new4 {
    int32 u4a = 113;
    string u4b = 114;
  }

  oneof u2 {
    int64 u2a = 109;
    string u2b = 110;
  }

  oneof u3 {
    int64 u3a = 111;
    InnerMessage u3b = 112;
  }
}

message TestMessageDeletedFields {
  int32 x = 100;
  string s = 102;
  InnerMessage m = 103;

  // Repeated fields.
  repeated int32 vi32 = 104;
  repeated InnerMessage vm = 106;

  // Oneof fields.

  oneof u3 {
    int64 u3a = 111;
    InnerMessage u3b = 112;
  }
}